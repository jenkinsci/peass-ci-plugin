ExecutionConfiguration=Ausführung
ExecutionConfigurationDescr=Konfiguriert die interne Ausführung von Workloads

VersionSelection=Commitauswahl
VersionSelectionDescr=Konfiguriert wie der gemessene Commit ausgewählt wird

OutputHandling=Ausgabenverwaltung
OutputHandlingDescr=Konfiguriert, wie die Ausgaben der Mess-VMs und von Peass selbst verarbeitet werden

RCAConfig=Ursachenanalyse
RCAConfigDescr=Konfiguriert die Ausführung der Ursachenanalyse

TracingConfig=Tracing
TracingConfigDescr=onfiguriert wie Ausführungstraces, sowohl für die Regressionstestselektion als auch für die Ursachenanalyse, ermittelt werden

TechnicalCompatibility=Technische Kompatibilität
TechnicalCompatibilityDescr=Konfiguriert wie technische Kompatibilität für konkrete Projekte und Umgebungseinrichtungen hergestellt wird

VMs=VMs
VMsDescr=Anzahl der VM-Ausführungen pro Commit (Mehr VM-Ausführungen machen es möglich, kleinere Performanceänderungen zu identifizieren)
iterations=Iterationen
iterationsDescr=Anzahl der Messiterationen innerhalb jeder VM (Mehr Messiterationen machen die Messergebnisse einer VM stabiler)
warmup=Warmup
warmupDescr=Anzahl der Warmupiterationen innerhalb jeder VM (Die Warmupiterationen sollten alle Iterationen umfassen, bis der stationäre Zustand erreicht ist; die Messwerte der Warmupiterationen werden gelöscht. Ein beendeter Warmup bedeutet u.a., dass die Just-in-Time-Compilation abgeschlossen ist.)
repetitions=Wiederholungen
repetitionsDescr=Anzahl der Wiederholungen, die innerhalb einer Iteration ausführt wird
executeRCA=RCA ausführen
executeRCADescr=Definition, ob die Ursachenanalyse (Root-Cause-Analysis, RCA) ausgeführt werden soll

includes=Includes
includesDescr=Definition der Tests, die ausschließlich einbezogen werden (andernfalls werden alle von surefire definierten Tests einbezogen). Matches werden gegen full-qualified classnames UND Methodennamen ausgeführt, wenn also org.TestA#method1 und org.TestA#method2 einbezogen werden sollen, sind org.TestA* oder org.TestA#method* mögliche include-Spezifikationen. Wenn es sich um ein Multimodulprojekt handelt, fügen Sie das module gefolgt von § hinzu, bspw. moduleA§package.Clazz#method.   

excludes=Excludes
excludesDescr=Definition der Tests, die nicht einbezogen werden sollen (basieren auf den Includes-Tests oder allen Tests). Matches werden äquivalent zum Verfahren bei Includes durchgeführt.

includeByRule=Include by Rule
includeByRuleDescr=Definiert die Rules, bei denen ein Test einbezogen werden soll (sofern definiert, werden nur die Tests ausgeführt, die eine der definierten Rules enthalten)

excludeByRule=Exclude by Rule
excludeByRuleDescr=Definitoin der Rules, bei denen Tests nicht einbezogen werden sollen (Sofern gesetzt, werden Tests, die die Rule enthalten, nicht ausgeführt, auch wenn sie eine der Rules aus includeByRule enthalten oder durch include einbezogen werden)

properties=Properties
propertiesDescr=Definiert die Properties, die an die Buildprozesse übergeben werden sollen

testGoal=Test Goal / Task
testGoalDescr=Test-Goal (maven) / Task (gradle) das für die Ausführung von Tests aufgerufen werden soll (default 'test')

cleanGoal=Clean Goal
cleanGoalDescr=Clean goal (maven) / task (gradle) das für die Reinigung der generierte Klasse aus dem vorherigen Build verwenden soll (default 'CleanTest')


pl=Projektliste
plDescr=Liste der Maven-Module, die gebaut werden sollen, in der üblichen Maven Notation die --pl übergeben wird

updateSnapshotDependencies=Update Snapshot Dependencies
updateSnapshotDependenciesDescr=Ob Peass initial heruntergeladen werden soll, um alle Snapshot-Dependencies herunterzuladen

removeSnapshots=SNAPSHOT-Versionen entfernen
removeSnapshotsDescr=Wenn das aktiviert ist, werden alle -SNAPSHOT-Abhängigkeiten durch reguläre Versionen ersetzt (1.1-SNAPSHOT -> 1.1). Dadurch wird es möglich, alte Versionen zu analysieren, bei denen die Abhängigkeiten schon released wurden.

useAlternativeBuildfile=Nutze alternative Builddatei
useAlternativeBuildfileDescr=Ersetzt die Gradle Builddatei, d.h. wenn ein Module eine Datei alternative_build.gradle enthält, wird die Original-Builddatei durch die alternative Datei ersetzt. Dies ist bspw. nötig, wenn Zertifizierungsprozesse im finalen Prozess deaktiviert werden sollen.

excludeLog4jSlf4jImpl=Log4j-slf4j-impl entfernen
excludeLog4jSlf4jImplDescr=Während der Ausführung werden KoPeMe- und Kieker-Abhängigkeiten zu den Projektabhängigkeiten hinzugefügt; wenn diese aktiviert ist, wird log4j-slf4j-impl zu den exclusions hinzugefügt (dies nicht zu den exklusions hinzuzufügen kann in einigen Spring-Konfigurationen Fehler verursachen)

excludeLog4jToSlf4j=Log4j-to-slf4j-impl entfernen
excludeLog4jToSlf4jDescr=Manchmal kollidieren existierende log4j-to-slf4j-Abhängigkeiten mit der Kieker/KoPeMe-Abhängigkeit. Diese Flags exkludiert diese (nur in Gradle).

timeout=Timeout
timeoutDescr=Timeout in Minuten, nach dem eine VM-Ausführung abgebrochen wird

executeParallel=Parallel Ausführen
executeParallelDescr=Wenn dies aktiviert ist, wird jeweils eine VM für die zu vergleichenden Commits gestartet; andernfalls werden die Experimente sequentiell ausgeführt

significanceLevel=Typ-1-Fehler
significanceLevelDescr=Typ-1-Fehler der vom zweiseiten T-Test akzeptiert wird. Der Typ-1-Fehler entspricht 1 - Signifikanzniveau, d.h. ein Typ-1-Fehler von 0.01 entspricht einem Signifikanzniveau von 99%.

commitDiff=Commitunterschied
commitDiffDescr=Anzahl der Commits, zwischen denen der Unterschied bestimmt werden soll

generateCoverageSelection=Generiere abdeckungsbasierte selektierte Tests
generateCoverageSelectionDescr=Definiert ob Tests basiert auf Abdeckung selektiert werden sollen

generateTwiceExecutability=Generiere Zweifach-Ausführbar Informationen
generateTwiceExecutabilityDescr=Erhebt die Information, ob ein Test zweimal in einer VM ausgeführt werden kann (durch zweifache Ausführung und Prüfung auf Fehler). Wenn dies aktiviert ist, werden nur die zweifach ausgeführten Tests gemessen (und potenzielle Fehler bei der Messung vermieden).

linearizeHistory=Commit-Verlauf linear verfolgen
linearizeHistoryDescr=Festgelegt, wie die Commit-Historie verfolgt werden soll (default: linear - die Deaktivierung führt zu einer nicht-linearen Verfolgung)

useSourceInstrumentation=Quelltextinstrumentierung nutzen
useSourceInstrumentationDescr=Wenn aktiviert, wird in einer Kopie des Quelltextes Monitoringquelltext für die Messung eingeführt; andernfalls wird AspectJ genutzt

useAggregation=Aggregation nutzen
useAggregationDescr=Wenn aktiviert, wird für jede Methode die Ausführungszeit addiert und alle repetition Aufrufe werden zusammen verarbeitet; andernfalls erfolgt die Verarbeitung direkt

rcaStrategy=RCA-Strategie
rcaStrategyDescr=Definiert, in welcher Reihenfolge die Performance einzelner Knoten des Aufrufbaums gemessen wird

createDefaultConstructor=Default-Konstruktor erstellen
createDefaultConstructorDescr=Wenn aktiviert, werden Default-Konstruktoren explizit erstellt, sofern sie nicht vorhanden sind

redirectSubprocessOutputToFile=Umleiten der Subprozessausgaben in Dateien
redirectSubprocessOutputToFileDescr=Ob Subprozessausgaben in Dateien umgeleitet werden sollen (default: true). Das Deaktivieren des Umleitens führt zu großen Jenkinslogs.

useGC=GC aktivieren
useGCDescr=Wenn aktiviert, wird zwischen zwei Iterationen System.gc aufgerufen; dies kann die Abweichungen zwischen den Messwerten reduzieren, führt aber in der Regel zu (teilweise enorm) erhöhter Ausführungsdauer

measureJMH=JMH-Tests ausführen
measureJMHDescr=Wenn aktiviert, werden zur Performanzmessung JMH Benchmarks ausgeführt, anstelle von transformierten JUnit Tests.

redirectToNull=Ausgabe nach null Umleiten
redirectToNullDescr=Ob die Ausgabe ignoriert werden soll oder auf die interne Konsole geschrieben werden soll (Um Messergebnisverfälschungen zu vermeiden, wird standardmäßig auf null umgeleitet)

showStart=Iterationsstart anzeigen
showStartDescr=Ob der Beginn jeder Messiteration angezeigt werden soll (Standardmäßig deaktiviert, um Messverfälschungen zu vermeiden)

executeBeforeClassInMeasurement=@BeforeClass bei jeder Messunge ausführen
executeBeforeClassInMeasurementDescr=Definiert, ob @BeforeClass (und @AfterClass) in der Messung ausgeführt wird; wenn aktiviert, wird @BeforeClass vor jeder Mess-reptition ausgeführt, andernfalls nur einmal vor allen Iterationen.

clearMockitoCaches=Löschen der Mockito-Caches vor jeder Ausführung..
clearMockitoCachesDescr=wenn aktiviert, werden die Mockito-Caches vor jeder Ausführung geleert; dies ist nur möglich, wenn executeBeforeClassInMeasurement aktiviert ist.

onlyMeasureWorkload=Nur Workload messen (kein @Before/@After)
onlyMeasureWorkloadDescr=Wenn aktiviert, werden @Before und @After nicht gemessen; dies ist nur möglich wenn repetitions == 1

displayRTSLogs=Regressionstestselektionslogs anzeigen
displayRTSLogsDescr=Logs der Regressionstestselektion speichern und anzeigen (erhöht Jenkins-internen Speicherverbrauch leicht)

displayLogs=Logs Anzeigen
displayLogsDescr=Logs einzelner VM-Ausführungen speichern und anzeigen (erhöht Jenkins-internen Speicherverbrauch)

displayRCALogs=Ursachenanalyselogs Anzeigen
displayRCALogsDescr=Logs einzelner VM-Ausführungen zur Ursachenanalyse speichern und anzeigen (erhöht Jenkins-internen Speicherverbrauch)

testExecutor=Spezifiziert TestExecutor
testExecutorDescr=Spezifiziert dem TestExecutor (benötigt für alternative Buildtools, d.h. nicht maven oder Gradle)

testTransformer=Spezifiziert TestTransformer
testTransformerDescr=Spezifiziert den TestTransformer (benötigt für alternative Workloaddefinitionen, bspw. JMH statt JUnit)

clazzFolders=Spezifiziert den Buildtool-Klassenordner
clazzFoldersDescr=Spezifiziert wo nach Klassen gesucht wird (default: src/main/java:src/java - der erste existierende Ordner wird im jeweiligen Modul genutzt)

testClazzFolders=Spezifiziert die Buildtool-Testklassenordner
testClazzFoldersDescr=Spezifiziert wo nach Testklassen gesucht wird (default: src/test/java:src/test - der erste existierende Ordner wird im jeweiligen Modul genutzt)

failOnRtsError=Build scheitern lassen, wenn RTS-Logs Fehler zeigen
failOnRtsErrorDescr=Zeigen die RTS-Logs für irgendeinen Test in aktueller oder Vorgängercommit einen Fehler, schlägt der gesamte Build fehl

xmx=Heapgröße
xmxDescr=Heapgröße für Java (übergeben via -Xmx, derzeitig nur unterstützt für Gradle)

kiekerWaitTime=Kieker Wait Time
kiekerWaitTimeDescr=Zeit, die KoPeMe wartet, bis das Schreiben der Kieker-Record-Queue beendet ist (default: 10)

kiekerQueueSize=Kieker Queue Size
kiekerQueueSizeDescr=Setzt die maximale Größe der Kieker-Record-Warteschlange (Speicher wird reserviert; Erhöhung ist sinnvoll, wenn Records geschluckt werden)

traceSizeInMb=Tracegröße in MB
traceSizeInMbDescr=Maximale Größe, bis zu der Trace gelesen wird; andernfalls wird er ignoriert (und der jeweilige Test als nicht ausführbar betrachtet)

importLogSizeInMb=Loggröße in MB
importLogSizeInMbDescr=Maximale Größe von Logs, die in Jenkins importiert werden; Logs die größer sind werden nicht importiert, aber die Tests werden regulär als ausführbar angesehen.

onlyOneCallRecording=Registrierung nur eines Aufrufs für die Regressionstestselektion
onlyOneCallRecordingDescr=Speichert nur einen Aufruf jeder Methode im Trace (nur erlaubt für Regressionstestselektion)

excludeForTracing=Exclude für das Tracing
excludeForTracingDescr=Liste der Methoden die beim Tracing nicht instrumentiert werden (bspw. weil sie zu oft aufgerufen werden). Die Methoden werden als Kieker-Pattern angegeben, bspw. * de.package.Clazz.methodA(..) für alle methodA in Clazz mit beliebigem Rückgabetyp.

statisticalTest=Statistischer Test
statisticalTestDescr=Statistischer Test, der genutzt wird, um Performanzänderungen zu ermitteln

gradleJavaPluginName=Gradle Java Pluginname
gradleJavaPluginNameDescr=Name des Gradle-Java-Plugins (falls ein anderer Name als 'Java' verwendet wird)

gradleSpringBootPluginName=Spring Boot Plugin Name
gradleSpringBootPluginNameDescr=Name des Gradle Spring Boot Plugins (falls ein anderer Name als der Standardname verwendet wird)

writeAsZip=Als ZIP Schreiben
writeAsZipDescr=Ob Traces und Trace-Diffs als ZIP-Dateien geschrieben werden sollen (reduziert den benötigten Festplattenspeicher, verlangsamt aber die Verarbeitung)


directlyMeasureKieker=Direkt mit Kieker Messen
directlyMeasureKiekerDescr=Aktiviert die Messung durch Kieker statt KoPeMe (ist nur nützlich wenn repetitions = 1 und wenn der Testrunner großen Warmup erzeugt)

Android=Android Unterstützung
AndroidDescr=Optionen spezifisch für Androidprojekte

useAnbox=Benutze den Android Emulator
useAnboxDescr=Wenn Tests auf einem Android Emulator laufen. Nutze diese Option, wenn die zu messenden Tests in einem Android Projekt auf einem verbunden Emulator oder Gerät sind.

androidManifest=AndroidManifest.xml Datei
androidManifestDescr=Setzt den relativen Pfad zur AndroidManifest.xml Datei

androidCompileSdkVersion=Überschreibt "compileSdkVersion"
androidCompileSdkVersionDescr=Überschreibt "compileSdkVersion" in der Modulverzeichnis "build.gradle" Datei

androidMinSdkVersion=Überschreibt "minSdkVersion"
androidMinSdkVersionDescr=Überschreibt "minSdkVersion" in der Modulverzeichnis "build.gradle" Datei

androidTargetSdkVersion=Überschreibt "targetSdkVersion"
androidTargetSdkVersionDescr=Überschreibt "targetSdkVersion" in der Modulverzeichnis "build.gradle" Datei

androidGradleVersion=Überschreibt Gradle version
androidGradleVersionDescr=Überschreibt die vorhandene Gradle Version in der Projektverzeichnis "build.gradle" Datei 

androidGradleTasks=Überschreibt Gradle install tasks
androidGradleTasksDescr=Liste von Gradle-Tasks mit denen die Tests kompiliert und auf dem Emulator installiert werden